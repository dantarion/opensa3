//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OpenSALib3.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("OpenSALib3.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0x000 Walk Initial Velocity
        ///The starting velocity obtained the moment the character starts walking.
        ///0
        ///
        ///0x004 Walk Acceleration
        ///The speed of acceleration while walking.
        ///0
        ///
        ///0x008 Walk Maximum Velocity
        ///The maximum velocity obtainable while walking.
        ///0
        ///
        ///0x00C Stopping Velocity
        ///The speed at which the character is able to stop at.
        ///0
        ///
        ///0x010 Dash &amp; StopTurn Initial Velocity
        ///The starting velocity obtained the moment the character starts a Dash.
        ///0
        ///
        ///0x014 StopTurn Deceleration
        ///The speed at which th [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Attributes {
            get {
                return ResourceManager.GetString("Attributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0001
        ///Synchronous Timer
        ///Pause the current flow of events until the set time is reached. Synchronous timers count down when they are reached in the code. 
        ///Frames
        ///
        ///0002
        ///Asynchronous Timer
        ///Pause the current flow of events until the set time is reached. Asynchronous Timers start counting from the beginning of the animation.
        ///Frames
        ///
        ///0004
        ///Set Loop
        ///Set a loop for X iterations. -1 (0xFFFF) sets an infinite loop.
        ///Iterations
        ///
        ///0005
        ///Execute Loop
        ///Execute the the previously set loop. 
        ///
        ///0007
        ///Subroutine        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Events {
            get {
                return ResourceManager.GetString("Events", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string Requirements {
            get {
                return ResourceManager.GetString("Requirements", resourceCulture);
            }
        }
    }
}
